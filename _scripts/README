
Назначение этих скриптов:
  - отладка создаваемых контейнеров
  - исследование новых контейнеров
  - избавление от рутины написания длинных строк
  - отладка kubernetes-манифестов
  - отладка docker-compose.yaml
  - отладка Dockerfiles
  - использование в автоматизации

Всё это - не более чем набор лайфхаков. Единые аргументы разных команд вынесены
в скрипт настроек. Сами же команды и их обращение к этому скрипту рассованы по
отдельным скриптам.
С одной стороны это позволяет избавиться от необходимости вводить одно и тоже,
что экономит время и не даёт забыть с чем вы работаете. Всё это улучшает фокус
на задаче.
С другой - позволяет извлечь максимальное удобство из автодополнения bash по
tab. Это также экономит время и попутно избавляет от блужданий по bash history.
Наберите ./ и нажмите tab-tab - поймёте о чём речь.

Все скрипты просты, минимальны и являются воплощением KISS. В них
нет ничего чудесного или удивительного. Вся магия кроется в синергии, когда
они работают вместе, по несколько десятков раз. Особенно в отладке.

Чтобы понять зачем всё это нужно, достаточно всего раз увидеть их в работе.
Скрипты использовались для создания контейнера: ./docker_from_scratch.
Он находится в корне репы и может послужить как примером, так и источником
вдохновения.

Обилие скриптов и их имена - не случайны. Названия либо напоминают команды
докера, либо мнемоничны и отражают общие задачи для работы с контейнерами.
При этом подразумевается что со временем их число будет расти, пока они не
закроют весь функционал необходимый для отладки.

Также, имена одних скриптов могут быть испрользованы как параметры для других.
Так deploy.sh принимает имена многих других скриптов в качестве опциий:
create.sh, rm.sh, enter.sh и др., выполняя с pod-ами k8s действия, аналогичные
тем, что сделали бы сами скрипты с docker-контейнерами. Такой ход отменяет
необходимость в пакете bash-completion.

Скрипты универсальны, а значит их следует подкладывать с помощью ссылок. Каждый
раз писать относительные пути - муторно. Поэтому сделан следующий ход:
В каталог, содержащий директории с контейнерами, на одном с ними уровне,
подкладывается ссылка на директорию _scripts:
cd "<КАТАЛОГ С ДИРЕКТОРИЯМИ ОБРАЗОв>" && ln -s "<ДИРЕКТОРИЯ ЭТОЙ РЕПЫ>/_scripts"

В её субдирректории ./links находятся предподготовленные относительные ссылки
на все скрипты. Именно их и следует копировать в папку с нужным контейнером.
Такой ход позволяют "по-быстренькому" набирать нужный функционал для нового образа.


Скрипты рассчитаны на взаимодействие со следующими папками:
image - содержит файлы образа для сборки. Если папка существует, то по её
наличию скрипт ./deploy_all.sh включит службу в массовую сборку образов.
volume - это папка для монтирования внутрь контейнера.
extracted - папка для вытаскивания файлов из контейнера с помощью cp

Настройки задаются через settings.sh и могут переопределяться через
individual_settings.sh. Подробнее можно прочесть в аннотации к settings.sh.
